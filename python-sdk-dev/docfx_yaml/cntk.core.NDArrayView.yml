api_name: []
items:
- _type: class
  children:
  - cntk.core.NDArrayView.from_csr
  - cntk.core.NDArrayView.from_data
  - cntk.core.NDArrayView.from_dense
  - cntk.core.NDArrayView.shape
  - cntk.core.NDArrayView.slice_view
  class: cntk.core.NDArrayView
  fullName: cntk.core.NDArrayView
  inheritance:
  - - cntk.cntk_py.NDArrayView
    - builtins.object
  module: cntk.core
  name: NDArrayView
  references:
  - fullName: cntk.core.NDArrayView.from_csr
    isExternal: false
    name: from_csr
    parent: ''
    uid: cntk.core.NDArrayView.from_csr
  - fullName: cntk.core.NDArrayView.from_data
    isExternal: false
    name: from_data
    parent: ''
    uid: cntk.core.NDArrayView.from_data
  - fullName: cntk.core.NDArrayView.from_dense
    isExternal: false
    name: from_dense
    parent: ''
    uid: cntk.core.NDArrayView.from_dense
  - fullName: cntk.core.NDArrayView.shape
    isExternal: false
    name: shape
    parent: ''
    uid: cntk.core.NDArrayView.shape
  - fullName: cntk.core.NDArrayView.slice_view
    isExternal: false
    name: slice_view
    parent: ''
    uid: cntk.core.NDArrayView.slice_view
  source:
    id: NDArrayView
    path: cntk/core.py
    remote:
      branch: master
      path: cntk/core.py
      repo: null
    startLine: 23
  syntax:
    exceptions: []
    parameters:
    - description: shape of the data
      id: device
      type: DeviceDescriptor
    - description: data type of the data
      id: data_type
      type: np.float32, np.float64
    - description: device this value should be put on
      id: shape
      type: tuple
    returntype: ''
    returnvalue: ''
    summary: 'Bases: `cntk.cntk_py.NDArrayView`

      Creates an empty dense internal data representation of a `Value` object. To
      create an NDArrayView from a NumPy array, use `from_dense()`. To create an NDArrayView
      from a sparse array, use `from_csr()`.





      '
    variables: []
  type: Class
  uid: cntk.core.NDArrayView
- _type: method
  class: cntk.core.NDArrayView
  fullName: cntk.core.NDArrayView.from_csr
  module: cntk.core
  name: from_csr
  source:
    id: from_csr
    path: cntk/internal/swig_helper.py
    remote:
      branch: master
      path: cntk/internal/swig_helper.py
      repo: null
    startLine: 79
  syntax:
    exceptions: []
    parameters:
    - description: SciPy sparse matrix in CSR format
      id: csr_array
      type: scipy.sparse.csr.csr_matrix
    - description: device this value should be put on
      id: read_only
      type: bool, optional
    - description: whether the data can be modified or not (default False)
      id: device
      type: DeviceDescriptor
    - description: whether nd_arrary memory can be borrowed internally to speed up
        the data creation
      id: borrow
      type: bool, default False
    returntype: ''
    returnvalue: '`NDArrayView` instance'
    summary: Create a `NDArrayView` instance from a SciPy sparse array in CSR format.
    variables: []
  type: Method
  uid: cntk.core.NDArrayView.from_csr
- _type: method
  class: cntk.core.NDArrayView
  fullName: cntk.core.NDArrayView.from_data
  module: cntk.core
  name: from_data
  source:
    id: from_data
    path: cntk/internal/swig_helper.py
    remote:
      branch: master
      path: cntk/internal/swig_helper.py
      repo: null
    startLine: 110
  syntax:
    exceptions: []
    parameters:
    - description: data
      id: device
      type: DeviceDescriptor
    - description: device this value should be put on
      id: read_only
      type: bool, optional
    - description: whether the data can be modified or not (default False)
      id: data
      type: numpy.ndarray or scipy.sparse.csr.csr_matrix
    - description: whether nd_arrary memory can be borrowed internally to speed up
        the data creation
      id: borrow
      type: bool, default False
    returntype: ''
    returnvalue: '`NDArrayView` instance'
    summary: Create a `NDArrayView` instance from a NumPy or SciPy sparse array in
      CSR format.
    variables: []
  type: Method
  uid: cntk.core.NDArrayView.from_data
- _type: method
  class: cntk.core.NDArrayView
  fullName: cntk.core.NDArrayView.from_dense
  module: cntk.core
  name: from_dense
  source:
    id: from_dense
    path: cntk/internal/swig_helper.py
    remote:
      branch: master
      path: cntk/internal/swig_helper.py
      repo: null
    startLine: 46
  syntax:
    exceptions: []
    parameters:
    - description: NumPy array
      id: borrow
      type: bool, default False
    - description: device this value should be put on
      id: read_only
      type: bool, optional
    - description: whether nd_arrary memory can be borrowed internally to speed up
        the data creation
      id: device
      type: DeviceDescriptor
    - description: whether the data can be modified or not (default False)
      id: np_array
      type: numpy.ndarray
    returntype: ''
    returnvalue: '`NDArrayView` instance'
    summary: Create a `NDArrayView` instance from a NumPy array.
    variables: []
  type: Method
  uid: cntk.core.NDArrayView.from_dense
- _type: attribute
  class: cntk.core.NDArrayView
  fullName: cntk.core.NDArrayView.shape
  module: cntk.core
  name: shape
  source:
    id: shape
    path: null
    remote:
      branch: master
      path: null
      repo: null
    startLine: null
  syntax:
    summary: The shape of this instance.
  type: Property
  uid: cntk.core.NDArrayView.shape
- _type: method
  class: cntk.core.NDArrayView
  fullName: cntk.core.NDArrayView.slice_view
  module: cntk.core
  name: slice_view
  source:
    id: slice_view
    path: cntk/internal/swig_helper.py
    remote:
      branch: master
      path: cntk/internal/swig_helper.py
      repo: null
    startLine: 153
  syntax:
    exceptions: []
    parameters:
    - description: shape of the same rank as this Value instance that denotes the
        start of the slicing
      id: extent
      type: tuple or list
    - description: shape of the right-aligned extent to keep
      id: read_only
      type: bool
    - description: whether the returned slice is read only or not
      id: start_offset
      type: tuple or list
    returntype: ''
    returnvalue: ''
    summary: "Returns a sliced view of the instance.\n-[ Example ]-\n>>> # Creating\
      \ an array of shape (1, 1, 2, 3)\n>>> np_array = np.asarray([[[[10, 20, 30],\
      \ [40, 50, 60]]]],                                       dtype=np.float32)\n\
      >>> nd = NDArrayView.from_dense(np_array)\n>>> sliced = nd.slice_view([0, 0,\
      \ 0, 0], [2, 3])\n>>> np_sliced = np.asarray(sliced)\n>>> # Result is an array\
      \ of shape (2, 3)\n>>> print(np_sliced)\n[[ 10.  20.  30.]\n [ 40.  50.  60.]]"
    variables: []
  type: Method
  uid: cntk.core.NDArrayView.slice_view
