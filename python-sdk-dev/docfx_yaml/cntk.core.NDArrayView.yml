#YamlMime:PythonReference
api_name: []
items:
- _type: class
  children:
  - cntk.core.NDArrayView.from_csr
  - cntk.core.NDArrayView.from_data
  - cntk.core.NDArrayView.from_dense
  - cntk.core.NDArrayView.shape
  - cntk.core.NDArrayView.slice_view
  class: cntk.core.NDArrayView
  fullName: cntk.core.NDArrayView
  inheritance:
  - inheritance:
    - type: builtins.object
    type: cntk.cntk_py.NDArrayView
  langs:
  - python
  module: cntk.core
  name: NDArrayView
  source:
    id: NDArrayView
    path: cntk/core.py
    remote:
      branch: master
      path: cntk/core.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 23
  summary: 'Bases: `cntk.cntk_py.NDArrayView`

    Creates an empty dense internal data representation of a `Value` object. To create
    an NDArrayView from a NumPy array, use @cntk.core.NDArrayView.from_dense. To create
    an NDArrayView from a sparse array, use @cntk.core.NDArrayView.from_csr.





    '
  syntax:
    content: NDArrayView(self, shape, data_type, device=None)
    parameters:
    - description: shape of the data
      id: shape
      type:
      - tuple
    - description: data type of the data
      id: data_type
      type:
      - np.float32, np.float64
    - description: device this value should be put on
      id: device
      type:
      - DeviceDescriptor
  type: Class
  uid: cntk.core.NDArrayView
- _type: method
  class: cntk.core.NDArrayView
  fullName: cntk.core.NDArrayView.from_csr
  langs:
  - python
  module: cntk.core
  name: from_csr
  source:
    id: from_csr
    path: cntk/internal/swig_helper.py
    remote:
      branch: master
      path: cntk/internal/swig_helper.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 79
  summary: Create a @cntk.core.NDArrayView instance from a SciPy sparse array in CSR
    format.
  syntax:
    content: from_csr()
    parameters:
    - description: SciPy sparse matrix in CSR format
      id: csr_array
      type:
      - scipy.sparse.csr.csr_matrix
    - description: device this value should be put on
      id: device
      type:
      - DeviceDescriptor
    - description: whether the data can be modified or not (default False)
      id: read_only
      type:
      - bool, optional
    - description: whether nd_arrary memory can be borrowed internally to speed up
        the data creation
      id: borrow
      type:
      - bool, default False
    return:
      description: '@cntk.core.NDArrayView instance'
  type: Method
  uid: cntk.core.NDArrayView.from_csr
- _type: method
  class: cntk.core.NDArrayView
  fullName: cntk.core.NDArrayView.from_data
  langs:
  - python
  module: cntk.core
  name: from_data
  source:
    id: from_data
    path: cntk/internal/swig_helper.py
    remote:
      branch: master
      path: cntk/internal/swig_helper.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 110
  summary: Create a @cntk.core.NDArrayView instance from a NumPy or SciPy sparse array
    in CSR format.
  syntax:
    content: from_data()
    parameters:
    - description: data
      id: data
      type:
      - numpy.ndarray or scipy.sparse.csr.csr_matrix
    - description: device this value should be put on
      id: device
      type:
      - DeviceDescriptor
    - description: whether the data can be modified or not (default False)
      id: read_only
      type:
      - bool, optional
    - description: whether nd_arrary memory can be borrowed internally to speed up
        the data creation
      id: borrow
      type:
      - bool, default False
    return:
      description: '@cntk.core.NDArrayView instance'
  type: Method
  uid: cntk.core.NDArrayView.from_data
- _type: method
  class: cntk.core.NDArrayView
  fullName: cntk.core.NDArrayView.from_dense
  langs:
  - python
  module: cntk.core
  name: from_dense
  source:
    id: from_dense
    path: cntk/internal/swig_helper.py
    remote:
      branch: master
      path: cntk/internal/swig_helper.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 46
  summary: Create a @cntk.core.NDArrayView instance from a NumPy array.
  syntax:
    content: from_dense()
    parameters:
    - description: NumPy array
      id: np_array
      type:
      - numpy.ndarray
    - description: device this value should be put on
      id: device
      type:
      - DeviceDescriptor
    - description: whether nd_arrary memory can be borrowed internally to speed up
        the data creation
      id: borrow
      type:
      - bool, default False
    - description: whether the data can be modified or not (default False)
      id: read_only
      type:
      - bool, optional
    return:
      description: '@cntk.core.NDArrayView instance'
  type: Method
  uid: cntk.core.NDArrayView.from_dense
- _type: attribute
  class: cntk.core.NDArrayView
  fullName: cntk.core.NDArrayView.shape
  langs:
  - python
  module: cntk.core
  name: shape
  source:
    id: shape
    path: null
    remote:
      branch: master
      path: null
      repo: https://github.com/Microsoft/CNTK
    startLine: null
  summary: The shape of this instance.
  syntax: {}
  type: Property
  uid: cntk.core.NDArrayView.shape
- _type: method
  class: cntk.core.NDArrayView
  fullName: cntk.core.NDArrayView.slice_view
  langs:
  - python
  module: cntk.core
  name: slice_view
  source:
    id: slice_view
    path: cntk/internal/swig_helper.py
    remote:
      branch: master
      path: cntk/internal/swig_helper.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 153
  summary: "Returns a sliced view of the instance.\n-[ Example ]-\n>>> # Creating\
    \ an array of shape (1, 1, 2, 3)\n>>> np_array = np.asarray([[[[10, 20, 30], [40,\
    \ 50, 60]]]],                                       dtype=np.float32)\n>>> nd\
    \ = NDArrayView.from_dense(np_array)\n>>> sliced = nd.slice_view([0, 0, 0, 0],\
    \ [2, 3])\n>>> np_sliced = np.asarray(sliced)\n>>> # Result is an array of shape\
    \ (2, 3)\n>>> print(np_sliced)\n[[ 10.  20.  30.]\n [ 40.  50.  60.]]"
  syntax:
    content: slice_view()
    parameters:
    - description: shape of the same rank as this Value instance that denotes the
        start of the slicing
      id: start_offset
      type:
      - tuple or list
    - description: shape of the right-aligned extent to keep
      id: extent
      type:
      - tuple or list
    - description: whether the returned slice is read only or not
      id: read_only
      type:
      - bool
  type: Method
  uid: cntk.core.NDArrayView.slice_view
references:
- fullName: cntk.core.NDArrayView.from_csr
  isExternal: false
  name: from_csr
  parent: cntk.core.NDArrayView
  uid: cntk.core.NDArrayView.from_csr
- fullName: cntk.core.NDArrayView.from_data
  isExternal: false
  name: from_data
  parent: cntk.core.NDArrayView
  uid: cntk.core.NDArrayView.from_data
- fullName: cntk.core.NDArrayView.from_dense
  isExternal: false
  name: from_dense
  parent: cntk.core.NDArrayView
  uid: cntk.core.NDArrayView.from_dense
- fullName: cntk.core.NDArrayView.shape
  isExternal: false
  name: shape
  parent: cntk.core.NDArrayView
  uid: cntk.core.NDArrayView.shape
- fullName: cntk.core.NDArrayView.slice_view
  isExternal: false
  name: slice_view
  parent: cntk.core.NDArrayView
  uid: cntk.core.NDArrayView.slice_view
