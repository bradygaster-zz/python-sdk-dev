#YamlMime:PythonReference
api_name: []
items:
- _type: module
  children:
  - cntk.internal.sanitize.is_string
  - cntk.internal.sanitize.sanitize_axis
  - cntk.internal.sanitize.sanitize_batch
  - cntk.internal.sanitize.sanitize_dtype_cntk
  - cntk.internal.sanitize.sanitize_dtype_numpy
  - cntk.internal.sanitize.sanitize_dynamic_axes
  - cntk.internal.sanitize.sanitize_function
  - cntk.internal.sanitize.sanitize_input
  - cntk.internal.sanitize.sanitize_precision
  - cntk.internal.sanitize.sanitize_shape
  - cntk.internal.sanitize.sanitize_value
  - cntk.internal.sanitize.sanitize_var_map
  - cntk.internal.sanitize.sanitize_variable_value_dict
  fullName: cntk.internal.sanitize
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize
  source:
    id: sanitize
    path: cntk/internal/sanitize.py
    remote:
      branch: master
      path: cntk/internal/sanitize.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 0
  type: Namespace
  uid: cntk.internal.sanitize
- _type: function
  fullName: cntk.internal.sanitize.is_string
  langs:
  - python
  module: cntk.internal.sanitize
  name: is_string
  source:
    id: is_string
    path: cntk/internal/sanitize.py
    remote:
      branch: master
      path: cntk/internal/sanitize.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 19
  summary: Tests whether `s` is a string in a way that works on Python 2 and 3.
  syntax:
    content: is_string(s)
    parameters:
    - id: s
  type: Method
  uid: cntk.internal.sanitize.is_string
- _type: function
  fullName: cntk.internal.sanitize.sanitize_axis
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_axis
  source:
    id: sanitize_axis
    path: cntk/internal/sanitize.py
    remote:
      branch: master
      path: cntk/internal/sanitize.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 391
  summary: Sanitizes the axis.
  syntax:
    content: sanitize_axis(axis)
    parameters:
    - description: 'the axis to be used.


        * [Axis](.md#cntk.axis.Axis.md): use axis instance directly (will convert
        row- to col-major in case of static axis).


        * int: if positive, use it as static axis. If negative, count from last to
        first axis


        * None: denote all available axes'
      id: axis
      type:
      - Axis or int or None
  type: Method
  uid: cntk.internal.sanitize.sanitize_axis
- _type: function
  fullName: cntk.internal.sanitize.sanitize_batch
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_batch
  source:
    id: sanitize_batch
    path: cntk/internal/swig_helper.py
    remote:
      branch: master
      path: cntk/internal/swig_helper.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 115
  summary: Convert to [Value](.md#cntk.core.Value.md).
  syntax:
    content: sanitize_batch()
    parameters:
    - description: input variable into which `batch` is passed
      id: var
      type:
      - Variable
    - description: 'batch input for *var*. It can be


        * a single NumPy array denoting the full minibatch


        * a list of NumPy arrays or SciPy sparse CSR matrices each representing a
        sequence


        * a [Value](.md#cntk.core.Value.md) object (e.g. returned by `one_hot()`)'
      id: batch
    - description: if None, every sequence is treated as a new sequence. Otherwise,
        it is interpreted as a list of Booleans one for each sequence in the batch
        that tell whether a sequence is a new sequence (*True*) or a continuation
        of the sequence in the same slot of the previous minibatch (*False*)
      id: seq_starts
      type:
      - list of bools or None
    - description: device this value should be put on
      id: device
      type:
      - DeviceDescriptor, default None
    return:
      description: batch converted to a [Value](.md#cntk.core.Value.md) instance that
        can be passed to the core API
  type: Method
  uid: cntk.internal.sanitize.sanitize_batch
- _type: function
  fullName: cntk.internal.sanitize.sanitize_dtype_cntk
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_dtype_cntk
  source:
    id: sanitize_dtype_cntk
    path: cntk/internal/sanitize.py
    remote:
      branch: master
      path: cntk/internal/sanitize.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 374
  syntax:
    content: sanitize_dtype_cntk(dtype)
    parameters:
    - id: dtype
  type: Method
  uid: cntk.internal.sanitize.sanitize_dtype_cntk
- _type: function
  fullName: cntk.internal.sanitize.sanitize_dtype_numpy
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_dtype_numpy
  source:
    id: sanitize_dtype_numpy
    path: cntk/internal/sanitize.py
    remote:
      branch: master
      path: cntk/internal/sanitize.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 359
  syntax:
    content: sanitize_dtype_numpy(dtype)
    parameters:
    - id: dtype
  type: Method
  uid: cntk.internal.sanitize.sanitize_dtype_numpy
- _type: function
  fullName: cntk.internal.sanitize.sanitize_dynamic_axes
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_dynamic_axes
  source:
    id: sanitize_dynamic_axes
    path: cntk/internal/sanitize.py
    remote:
      branch: master
      path: cntk/internal/sanitize.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 414
  syntax:
    content: sanitize_dynamic_axes(axes)
    parameters:
    - id: axes
  type: Method
  uid: cntk.internal.sanitize.sanitize_dynamic_axes
- _type: function
  fullName: cntk.internal.sanitize.sanitize_function
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_function
  source:
    id: sanitize_function
    path: cntk/internal/sanitize.py
    remote:
      branch: master
      path: cntk/internal/sanitize.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 193
  summary: Tries to retrieve a Function from the argument or throws an exception if
    that's not possible.
  syntax:
    content: sanitize_function(arg)
    parameters:
    - id: arg
  type: Method
  uid: cntk.internal.sanitize.sanitize_function
- _type: function
  fullName: cntk.internal.sanitize.sanitize_input
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_input
  source:
    id: sanitize_input
    path: cntk/internal/sanitize.py
    remote:
      branch: master
      path: cntk/internal/sanitize.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 69
  summary: "Convert to `Variable` so that it can be passed as Variable to the CNTK\
    \ operators.\n* If `arg` is a NumPy array and its type is neither *np.float32*\
    \ nor *np.float64*, it sets it to *np.float32*.\n\n   * If `arg` is an op, it\
    \ is assumed that it has only one output, which will be returned."
  syntax:
    content: sanitize_input(arg, fallback_dtype=<class 'numpy.float32'>, reshape=None)
    parameters:
    - id: arg
    - defaultValue: None
      description: input
      id: arg
      type:
      - number, NumPy array, Variable, or Function
    - defaultValue: <class 'numpy.float32'>
      description: fallback dtype in case `arg` is a list
      id: fallback_dtype
      type:
      - NumPy dtype
    return:
      description: Leaves Constant, Parameter, and Variable as is. Returns Constant,
        if `arg` is a number or NumPy array. Variable otherwise.
  type: Method
  uid: cntk.internal.sanitize.sanitize_input
- _type: function
  fullName: cntk.internal.sanitize.sanitize_precision
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_precision
  source:
    id: sanitize_precision
    path: cntk/internal/sanitize.py
    remote:
      branch: master
      path: cntk/internal/sanitize.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 41
  summary: Converts precision to NumPy precision
  syntax:
    content: sanitize_precision(precision)
    parameters:
    - description: precision, if string it can be one of 'float' 'float32, 'double',
        or 'float64'
      id: precision
      type:
      - str or np.float32 or np.float64
    return:
      description: NumPy precision
  type: Method
  uid: cntk.internal.sanitize.sanitize_precision
- _type: function
  fullName: cntk.internal.sanitize.sanitize_shape
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_shape
  source:
    id: sanitize_shape
    path: cntk/internal/sanitize.py
    remote:
      branch: master
      path: cntk/internal/sanitize.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 62
  summary: If shape is scalar, it creates a tuple out of it.
  syntax:
    content: sanitize_shape(shape)
    parameters:
    - id: shape
  type: Method
  uid: cntk.internal.sanitize.sanitize_shape
- _type: function
  fullName: cntk.internal.sanitize.sanitize_value
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_value
  source:
    id: sanitize_value
    path: cntk/internal/sanitize.py
    remote:
      branch: master
      path: cntk/internal/sanitize.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 158
  summary: Converts a given `value` to an [NDArrayView](.md#cntk.core.NDArrayView.md)
    object that can be passed to the CNTK core.
  syntax:
    content: sanitize_value(shape, value, dtype, device)
    parameters:
    - description: shape of the value
      id: shape
      type:
      - tuple
    - description: the value to be converted
      id: value
      type:
      - None or value that can be cast to NumPy array
    - description: data type (np.float32 or np.float64)
      id: dtype
    - description: device this value should be put on
      id: device
      type:
      - DeviceDescriptor
    return:
      description: '[NDArrayView](.md#cntk.core.NDArrayView.md) object representing
        `value`'
  type: Method
  uid: cntk.internal.sanitize.sanitize_value
- _type: function
  fullName: cntk.internal.sanitize.sanitize_var_map
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_var_map
  source:
    id: sanitize_var_map
    path: cntk/internal/sanitize.py
    remote:
      branch: master
      path: cntk/internal/sanitize.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 212
  summary: Sanitizes a dictionary of *Variable* s to input data such that it can be
    handed off to the evaluation methods (`forward()`, `backward()`, `train_minibatch()`
    and `test_minibatch()`).
  syntax:
    content: sanitize_var_map(op_arguments, arguments, precision=None, device=None,
      extract_values_from_minibatch_data=True)
    parameters:
    - defaultValue: None
      description: arguments of the root function. In `forward()` pass it is typically
        *op.arguments*, in `backward()` pass it is *op.outputs*
      id: op_arguments
      type:
      - Function
    - description: "maps variables to their input data. The interpretation depends\
        \ on the input type:\n\n   * dict: keys are input variable or names, and values\
        \ are the input data.\n\n   * any other type: if node has a unique input,\
        \ arguments is mapped to this input.\n\nFor nodes with more than one input,\
        \ only dict is allowed.\n\nIn both cases, every sample in the data will be\
        \ interpreted as a new sequence.\n\nSequences can be marked as continuations\
        \ of the same sequence in the previous minibatch (that is the sequence in\
        \ the same slot). There are two possibilities for this:\n\n   * specifying\
        \ arguments as a *tuple* where the first element is used as arguments and\
        \ the second one will be used as a list of bools, denoting whether a sequence\
        \ is a new one (*True*) or a continuation of the sequence in the same slot\
        \ of the previous minibatch (*False*). This will be applied to all batches.\n\
        \n   * specifying arguments as a dictionary of variables to tuples where the\
        \ first element is used as arguments and the second one will be used as a\
        \ list of bools, denoting whether a sequence is a new one (*True*) or a continuation\
        \ of the sequence in the same slot of the previous minibatch (*False*). This\
        \ will be applied to all batches.\n\nData should be either NumPy arrays or\
        \ a `MinibatchData` instance."
      id: arguments
    - description: if string it can be one of 'float' 'float32, 'double', 'float64',
        or None
      id: precision
      type:
      - str or np.float32 or np.float64
    - defaultValue: 'True'
      description: device this value should be put on
      id: device
      type:
      - DeviceDescriptor, default None
    - defaultValue: None
      description: specifies if `MinibatchData` instances in the arguments map are
        converted to the underlying value ([Value](.md#cntk.core.Value.md)) instances
        (default), or if they should remain intact, as they contain additional meta
        information required by the Trainer (specifically, by the `train_minibatch()`
        method).
      id: extract_values_from_minibatch_data
      type:
      - bool, defaults to True
    return:
      description: '*dict* that maps variables to sanitized batches'
  type: Method
  uid: cntk.internal.sanitize.sanitize_var_map
- _type: function
  fullName: cntk.internal.sanitize.sanitize_variable_value_dict
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_variable_value_dict
  source:
    id: sanitize_variable_value_dict
    path: cntk/internal/sanitize.py
    remote:
      branch: master
      path: cntk/internal/sanitize.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 424
  syntax:
    content: sanitize_variable_value_dict(var_value_dict)
    parameters:
    - id: var_value_dict
  type: Method
  uid: cntk.internal.sanitize.sanitize_variable_value_dict
references:
- fullName: cntk.internal.sanitize.is_string
  isExternal: false
  name: is_string
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.is_string
- fullName: cntk.internal.sanitize.sanitize_axis
  isExternal: false
  name: sanitize_axis
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_axis
- fullName: cntk.internal.sanitize.sanitize_batch
  isExternal: false
  name: sanitize_batch
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_batch
- fullName: cntk.internal.sanitize.sanitize_dtype_cntk
  isExternal: false
  name: sanitize_dtype_cntk
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_dtype_cntk
- fullName: cntk.internal.sanitize.sanitize_dtype_numpy
  isExternal: false
  name: sanitize_dtype_numpy
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_dtype_numpy
- fullName: cntk.internal.sanitize.sanitize_dynamic_axes
  isExternal: false
  name: sanitize_dynamic_axes
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_dynamic_axes
- fullName: cntk.internal.sanitize.sanitize_function
  isExternal: false
  name: sanitize_function
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_function
- fullName: cntk.internal.sanitize.sanitize_input
  isExternal: false
  name: sanitize_input
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_input
- fullName: cntk.internal.sanitize.sanitize_precision
  isExternal: false
  name: sanitize_precision
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_precision
- fullName: cntk.internal.sanitize.sanitize_shape
  isExternal: false
  name: sanitize_shape
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_shape
- fullName: cntk.internal.sanitize.sanitize_value
  isExternal: false
  name: sanitize_value
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_value
- fullName: cntk.internal.sanitize.sanitize_var_map
  isExternal: false
  name: sanitize_var_map
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_var_map
- fullName: cntk.internal.sanitize.sanitize_variable_value_dict
  isExternal: false
  name: sanitize_variable_value_dict
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_variable_value_dict
