#YamlMime:PythonReference
api_name: []
items:
- _type: class
  children:
  - cntk.io.MinibatchSource.current_position
  - cntk.io.MinibatchSource.get_checkpoint_state
  - cntk.io.MinibatchSource.is_distributed
  - cntk.io.MinibatchSource.next_minibatch
  - cntk.io.MinibatchSource.restore_from_checkpoint
  - cntk.io.MinibatchSource.stream_info
  - cntk.io.MinibatchSource.stream_infos
  class: cntk.io.MinibatchSource
  fullName: cntk.io.MinibatchSource
  inheritance:
  - inheritance:
    - type: builtins.object
    type: cntk.cntk_py.MinibatchSource
  langs:
  - python
  module: cntk.io
  name: MinibatchSource
  source:
    id: MinibatchSource
    path: cntk/io/__init__.py
    remote:
      branch: master
      path: cntk/io/__init__.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 82
  summary: 'Bases: `cntk.cntk_py.MinibatchSource`

    A *MinibatchSource* can be indexed by the stream name, which will return a Parent
    class of all minibatch sources.  A *MinibatchSource* can be indexed by the stream
    name, which will return a @cntk.io.MinibatchData object that can be passed e.g.
    to the `train_minibatch()` function.







    '
  syntax:
    content: MinibatchSource(self, deserializers=None, randomize=True, randomization_window=128,
      sample_based_randomization_window=False, epoch_size=18446744073709551615, distributed_after=18446744073709551615,
      multithreaded_deserializer=None, frame_mode=False, truncation_length=0)
    parameters:
    - description: list of deserializers
      id: deserializers
      type:
      - list, defaults to empty
    - description: randomize before every epoch
      id: randomize
      type:
      - bool, defaults to True
    - description: size of window that reader will shuffle, ignored if *randomize*
        is *False*
      id: randomization_window
      type:
      - int
    - description: specifies how to interpret *randomization_window*. If *True*, the
        size of the randomization window is interpreted as a certain number of samples,
        otherwise -- as a number of chunks. Similarly to *randomization_window*, this
        parameter is ignored, when *randomize* is *False*
      id: sample_based_randomization_window
      type:
      - bool, defaults to False
    - description: number of samples as a scheduling unit. Parameters in the schedule
        change their values every *epoch_size* samples. If no *epoch_size* is provided,
        this parameter is substituted by the size of the full data sweep with infinte
        repeat, in which case the scheduling unit is the entire data sweep (as indicated
        by the MinibatchSource) and parameters change their values on the sweep-by-sweep
        basis specified by the schedule. **Important:** Click [here](https://github.com/Microsoft/CNTK/wiki/BrainScript-epochSize-and-Python-epoch_size-in-CNTK)
        for a full description of this parameter.
      id: epoch_size
      type:
      - int, defaults to INFINITELY_REPEAT
    - description: sample count after which minibatch source becomes distributed
      id: distributed_after
      type:
      - int, defaults to cntk.io.INFINITE_SAMPLES
    - description: using multi threaded deserializer
      id: multithreaded_deserializer
      type:
      - bool, defaults to None
    - description: Specifies if data should be randomized and returned at the frame
        or sequence level. When  true , input sequence are split into frames.
      id: frame_mode
      type:
      - bool, defaults to False
    - description: Specifies the truncation length in samples for BPTT (positive integer).
        If greater than zero *frame_mode* cannot be used at the same time.
      id: truncation_length
      type:
      - int
  type: Class
  uid: cntk.io.MinibatchSource
- _type: attribute
  class: cntk.io.MinibatchSource
  fullName: cntk.io.MinibatchSource.current_position
  langs:
  - python
  module: cntk.io
  name: current_position
  source:
    id: current_position
    path: null
    remote:
      branch: master
      path: null
      repo: https://github.com/Microsoft/CNTK
    startLine: null
  summary: Gets current position in the minibatch source.
  syntax:
    return:
      description: Minibatch position `Dictionary` on the global timeline.
  type: Property
  uid: cntk.io.MinibatchSource.current_position
- _type: method
  class: cntk.io.MinibatchSource
  fullName: cntk.io.MinibatchSource.get_checkpoint_state
  langs:
  - python
  module: cntk.io
  name: get_checkpoint_state
  source:
    id: get_checkpoint_state
    path: cntk/io/__init__.py
    remote:
      branch: master
      path: cntk/io/__init__.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 223
  summary: Gets the checkpoint state of the MinibatchSource.
  syntax:
    content: get_checkpoint_state(self)
    parameters:
    - id: self
    return:
      description: A `Dictionary` that has the checkpoint state of the MinibatchSource
      type:
      - cntk.cntk_py.Dictionary
  type: Method
  uid: cntk.io.MinibatchSource.get_checkpoint_state
- _type: attribute
  class: cntk.io.MinibatchSource
  fullName: cntk.io.MinibatchSource.is_distributed
  langs:
  - python
  module: cntk.io
  name: is_distributed
  source:
    id: is_distributed
    path: null
    remote:
      branch: master
      path: null
      repo: https://github.com/Microsoft/CNTK
    startLine: null
  summary: Whether the minibatch source is running distributed
  syntax: {}
  type: Property
  uid: cntk.io.MinibatchSource.is_distributed
- _type: method
  class: cntk.io.MinibatchSource
  fullName: cntk.io.MinibatchSource.next_minibatch
  langs:
  - python
  module: cntk.io
  name: next_minibatch
  source:
    id: next_minibatch
    path: cntk/internal/swig_helper.py
    remote:
      branch: master
      path: cntk/internal/swig_helper.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 173
  summary: 'Reads a minibatch that contains data for all input streams.  The minibatch
    size is specified in terms of #samples and/or #sequences for the primary input
    stream; value of 0 for #samples/#sequences means unspecified.  In case the size
    is specified in terms of both #sequences and #samples, the smaller of the 2 is
    taken.  An empty map is returned when the MinibatchSource has no more data to
    return.'
  syntax:
    content: next_minibatch()
    parameters:
    - description: '<SYSTEM MESSAGE: /root/CNTK/bindings/python/doc/cntk.io.rst:2:
        (INFO/1) Duplicate explicit target name: "here".>


        number of samples to retrieve for the next minibatch. Must be > 0. **Important:**
        Click [here](https://github.com/Microsoft/CNTK/wiki/BrainScript-epochSize-and-Python-epoch_size-in-CNTK)
        for a full description of this parameter.'
      id: minibatch_size_in_samples
      type:
      - int
    - description: mapping of `Variable` to `StreamInformation` which will be used
        to convert the returned data.
      id: input_map
      type:
      - dict
    - description: CNTK DeviceDescriptor
      id: device
      type:
      - DeviceDescriptor, defaults to None
    - description: Used for distributed training, indicates into how many partitions
        the source should split the data.
      id: num_data_partitions
    - description: Used for distributed training, indicates data from which partition
        to take.
      id: partition_index
      type:
      - int, defaults to None
    return:
      description: A mapping of `StreamInformation` to @cntk.io.MinibatchData if *input_map*
        was not specified. Otherwise, the returned value will be a mapping of `Variable`
        to class:*MinibatchData*.
      type:
      - cntk.io.MinibatchData
  type: Method
  uid: cntk.io.MinibatchSource.next_minibatch
- _type: method
  class: cntk.io.MinibatchSource
  fullName: cntk.io.MinibatchSource.restore_from_checkpoint
  langs:
  - python
  module: cntk.io
  name: restore_from_checkpoint
  source:
    id: restore_from_checkpoint
    path: cntk/io/__init__.py
    remote:
      branch: master
      path: cntk/io/__init__.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 233
  summary: Restores the MinibatchSource state from the specified checkpoint.
  syntax:
    content: restore_from_checkpoint(self, checkpoint)
    parameters:
    - id: self
    - description: checkpoint to restore from
      id: checkpoint
      type:
      - Dictionary
  type: Method
  uid: cntk.io.MinibatchSource.restore_from_checkpoint
- _type: method
  class: cntk.io.MinibatchSource
  fullName: cntk.io.MinibatchSource.stream_info
  langs:
  - python
  module: cntk.io
  name: stream_info
  source:
    id: stream_info
    path: cntk/io/__init__.py
    remote:
      branch: master
      path: cntk/io/__init__.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 156
  summary: Gets the description of the stream with given name. Throws an exception
    if there are none or multiple streams with this same name.
  syntax:
    content: stream_info(self, name)
    parameters:
    - id: self
    - id: name
  type: Method
  uid: cntk.io.MinibatchSource.stream_info
- _type: method
  class: cntk.io.MinibatchSource
  fullName: cntk.io.MinibatchSource.stream_infos
  langs:
  - python
  module: cntk.io
  name: stream_infos
  source:
    id: stream_infos
    path: cntk/io/__init__.py
    remote:
      branch: master
      path: cntk/io/__init__.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 146
  summary: Describes the stream that this source produces.
  syntax:
    content: stream_infos(self)
    parameters:
    - id: self
    return:
      description: A *dict* mapping input names to the stream information
      type:
      - dict
  type: Method
  uid: cntk.io.MinibatchSource.stream_infos
references:
- fullName: cntk.io.MinibatchSource.current_position
  isExternal: false
  name: current_position
  parent: cntk.io.MinibatchSource
  uid: cntk.io.MinibatchSource.current_position
- fullName: cntk.io.MinibatchSource.get_checkpoint_state
  isExternal: false
  name: get_checkpoint_state
  parent: cntk.io.MinibatchSource
  uid: cntk.io.MinibatchSource.get_checkpoint_state
- fullName: cntk.io.MinibatchSource.is_distributed
  isExternal: false
  name: is_distributed
  parent: cntk.io.MinibatchSource
  uid: cntk.io.MinibatchSource.is_distributed
- fullName: cntk.io.MinibatchSource.next_minibatch
  isExternal: false
  name: next_minibatch
  parent: cntk.io.MinibatchSource
  uid: cntk.io.MinibatchSource.next_minibatch
- fullName: cntk.io.MinibatchSource.restore_from_checkpoint
  isExternal: false
  name: restore_from_checkpoint
  parent: cntk.io.MinibatchSource
  uid: cntk.io.MinibatchSource.restore_from_checkpoint
- fullName: cntk.io.MinibatchSource.stream_info
  isExternal: false
  name: stream_info
  parent: cntk.io.MinibatchSource
  uid: cntk.io.MinibatchSource.stream_info
- fullName: cntk.io.MinibatchSource.stream_infos
  isExternal: false
  name: stream_infos
  parent: cntk.io.MinibatchSource
  uid: cntk.io.MinibatchSource.stream_infos
