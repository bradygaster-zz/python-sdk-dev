#YamlMime:PythonReference
api_name: []
items:
- _type: module
  children:
  - cntk.logging.graph.depth_first_search
  - cntk.logging.graph.find_all_with_name
  - cntk.logging.graph.find_by_name
  - cntk.logging.graph.get_node_outputs
  - cntk.logging.graph.output_function_graph
  - cntk.logging.graph.plot
  fullName: cntk.logging.graph
  langs:
  - python
  module: cntk.logging.graph
  name: graph
  source:
    id: graph
    path: cntk/logging/graph.py
    remote:
      branch: master
      path: cntk/logging/graph.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 0
  type: Namespace
  uid: cntk.logging.graph
- _type: function
  fullName: cntk.logging.graph.depth_first_search
  langs:
  - python
  module: cntk.logging.graph
  name: depth_first_search
  source:
    id: depth_first_search
    path: cntk/logging/graph.py
    remote:
      branch: master
      path: cntk/logging/graph.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 11
  summary: Generic function that walks through the graph starting at `root` and uses
    function `visitor` on each node to check whether it should be returned.
  syntax:
    content: depth_first_search(root, visitor)
    parameters:
    - description: the root to start the journey from
      id: root
      type:
      - Function or Variable
    - description: function that takes a node as argument and returns `True` if that
        node should be returned.
      id: visitor
      type:
      - Python function or lambda
    return:
      description: List of functions, for which `visitor` was `True`
  type: Method
  uid: cntk.logging.graph.depth_first_search
- _type: function
  fullName: cntk.logging.graph.find_all_with_name
  langs:
  - python
  module: cntk.logging.graph
  name: find_all_with_name
  seealso: 'See also: `find_all_with_name()` in class `Function`.'
  source:
    id: find_all_with_name
    path: cntk/logging/graph.py
    remote:
      branch: master
      path: cntk/logging/graph.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 72
  summary: Finds functions in the graph starting from `node` and doing a depth-first
    search.
  syntax:
    content: find_all_with_name(node, node_name)
    parameters:
    - description: the node to start the journey from
      id: node
      type:
      - Function or Variable
    - description: name for which we are search nodes
      id: node_name
      type:
      - str
    return:
      description: List of primitive (or block) functions having the specified name
  type: Method
  uid: cntk.logging.graph.find_all_with_name
- _type: function
  fullName: cntk.logging.graph.find_by_name
  langs:
  - python
  module: cntk.logging.graph
  name: find_by_name
  seealso: 'See also: `find_by_name()` in class `Function`.'
  source:
    id: find_by_name
    path: cntk/logging/graph.py
    remote:
      branch: master
      path: cntk/logging/graph.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 90
  summary: Finds a function in the graph starting from `node` and doing a depth-first
    search. It assumes that the name occurs only once.
  syntax:
    content: find_by_name(node, node_name)
    parameters:
    - description: the node to start the journey from
      id: node
      type:
      - Function or Variable
    - description: name for which we are search nodes
      id: node_name
      type:
      - str
    return:
      description: Primitive (or block) function having the specified name
  type: Method
  uid: cntk.logging.graph.find_by_name
- _type: function
  fullName: cntk.logging.graph.get_node_outputs
  langs:
  - python
  module: cntk.logging.graph
  name: get_node_outputs
  source:
    id: get_node_outputs
    path: cntk/logging/graph.py
    remote:
      branch: master
      path: cntk/logging/graph.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 348
  summary: Walks through every node of the graph starting at `node` and returns a
    list of all node outputs.
  syntax:
    content: get_node_outputs(node)
    parameters:
    - description: the node to start the journey from
      id: node
      type:
      - graph node
    return:
      description: A list of all node outputs
  type: Method
  uid: cntk.logging.graph.get_node_outputs
- _type: function
  fullName: cntk.logging.graph.output_function_graph
  langs:
  - python
  module: cntk.logging.graph
  name: output_function_graph
  source:
    id: output_function_graph
    path: cntk/logging/graph.py
    remote:
      branch: master
      path: cntk/logging/graph.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 334
  syntax:
    content: output_function_graph(node, dot_file_path=None, png_file_path=None)
    parameters:
    - id: node
    - defaultValue: None
      id: dot_file_path
    - defaultValue: None
      id: png_file_path
  type: Method
  uid: cntk.logging.graph.output_function_graph
- _type: function
  fullName: cntk.logging.graph.plot
  langs:
  - python
  module: cntk.logging.graph
  name: plot
  source:
    id: plot
    path: cntk/logging/graph.py
    remote:
      branch: master
      path: cntk/logging/graph.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 123
  summary: "Walks through every node of the graph starting at `root`, creates a network\
    \ graph, and returns a network description. If `filename` is specified, it outputs\
    \ a DOT, PNG, PDF, or SVG file depending on the file name's suffix.\nRequirements:\n\
    * for DOT output: [pydot_ng](https://pypi.python.org/pypi/pydot-ng)\n\n   * <SYSTEM\
    \ MESSAGE: /root/CNTK/bindings/python/doc/cntk.logging.rst:2: (INFO/1) Duplicate\
    \ explicit target name: \"pydot_ng\".>\n\n     for PNG, PDF, and SVG output: [pydot_ng](https://pypi.python.org/pypi/pydot-ng)\
    \ and [graphviz](http://graphviz.org) (GraphViz executable has to be in the system's\
    \ PATH)."
  syntax:
    content: plot(root, filename=None)
    parameters:
    - description: the node to start the journey from
      id: node
      type:
      - graph node
    - defaultValue: None
      description: file with extension '.dot', 'png', 'pdf', or 'svg' to denote what
        format should be written. If *None* then nothing will be plotted, and the
        returned string can be used to debug the graph.
      id: filename
      type:
      - str, default None
    return:
      description: '*str* describing the graph'
  type: Method
  uid: cntk.logging.graph.plot
references:
- fullName: cntk.logging.graph.depth_first_search
  isExternal: false
  name: depth_first_search
  parent: cntk.logging.graph
  uid: cntk.logging.graph.depth_first_search
- fullName: cntk.logging.graph.find_all_with_name
  isExternal: false
  name: find_all_with_name
  parent: cntk.logging.graph
  uid: cntk.logging.graph.find_all_with_name
- fullName: cntk.logging.graph.find_by_name
  isExternal: false
  name: find_by_name
  parent: cntk.logging.graph
  uid: cntk.logging.graph.find_by_name
- fullName: cntk.logging.graph.get_node_outputs
  isExternal: false
  name: get_node_outputs
  parent: cntk.logging.graph
  uid: cntk.logging.graph.get_node_outputs
- fullName: cntk.logging.graph.output_function_graph
  isExternal: false
  name: output_function_graph
  parent: cntk.logging.graph
  uid: cntk.logging.graph.output_function_graph
- fullName: cntk.logging.graph.plot
  isExternal: false
  name: plot
  parent: cntk.logging.graph
  uid: cntk.logging.graph.plot
