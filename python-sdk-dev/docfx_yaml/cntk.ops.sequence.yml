api_name: []
items:
- _type: module
  children:
  - cntk.ops.sequence.broadcast_as
  - cntk.ops.sequence.delay
  - cntk.ops.sequence.first
  - cntk.ops.sequence.gather
  - cntk.ops.sequence.is_first
  - cntk.ops.sequence.is_last
  - cntk.ops.sequence.last
  - cntk.ops.sequence.reduce_sum
  - cntk.ops.sequence.scatter
  - cntk.ops.sequence.slice
  - cntk.ops.sequence.where
  fullName: cntk.ops.sequence
  module: cntk.ops.sequence
  name: sequence
  references:
  - fullName: cntk.ops.sequence.broadcast_as
    isExternal: false
    name: broadcast_as
    parent: ''
    uid: cntk.ops.sequence.broadcast_as
  - fullName: cntk.ops.sequence.delay
    isExternal: false
    name: delay
    parent: ''
    uid: cntk.ops.sequence.delay
  - fullName: cntk.ops.sequence.first
    isExternal: false
    name: first
    parent: ''
    uid: cntk.ops.sequence.first
  - fullName: cntk.ops.sequence.gather
    isExternal: false
    name: gather
    parent: ''
    uid: cntk.ops.sequence.gather
  - fullName: cntk.ops.sequence.is_first
    isExternal: false
    name: is_first
    parent: ''
    uid: cntk.ops.sequence.is_first
  - fullName: cntk.ops.sequence.is_last
    isExternal: false
    name: is_last
    parent: ''
    uid: cntk.ops.sequence.is_last
  - fullName: cntk.ops.sequence.last
    isExternal: false
    name: last
    parent: ''
    uid: cntk.ops.sequence.last
  - fullName: cntk.ops.sequence.reduce_sum
    isExternal: false
    name: reduce_sum
    parent: ''
    uid: cntk.ops.sequence.reduce_sum
  - fullName: cntk.ops.sequence.scatter
    isExternal: false
    name: scatter
    parent: ''
    uid: cntk.ops.sequence.scatter
  - fullName: cntk.ops.sequence.slice
    isExternal: false
    name: slice
    parent: ''
    uid: cntk.ops.sequence.slice
  - fullName: cntk.ops.sequence.where
    isExternal: false
    name: where
    parent: ''
    uid: cntk.ops.sequence.where
  source:
    id: sequence
    path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/ops/sequence/__init__.py
    remote:
      branch: master
      path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/ops/sequence/__init__.py
      repo: null
    startLine: 0
  type: Namespace
  uid: cntk.ops.sequence
- _type: function
  fullName: cntk.ops.sequence.broadcast_as
  module: cntk.ops.sequence
  name: broadcast_as
  source:
    id: broadcast_as
    path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/internal/swig_helper.py
    remote:
      branch: master
      path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/internal/swig_helper.py
      repo: null
    startLine: 314
  syntax:
    exceptions: []
    parameters:
    - description: the symbolic tensor whose value will be broadcast
      id: name
      type: str
    returntype: ''
    returnvalue: '`Function`'
    summary: "Creates a sequence out of a non-sequence by endowing the `operand` with\
      \ dynamic axes of the same type as the `broadcast_as_operand` and broadcasting\
      \ the value of the `operand` along those dynamic axes.\n-[ Example ]-\n>>> x\
      \ = C.input_variable(shape=(3,2))\n>>> t = C.sequence.last(x)\n>>> b = C.sequence.is_first(x)\n\
      >>> y = C.sequence.broadcast_as(t, b)\n>>> # create one sequence of 4 tensors\
      \ each with shape (3,2)\n>>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))\n\
      >>> y.eval({x:x0})\narray([[[[ 18.,  19.],\n         [ 20.,  21.],\n       \
      \  [ 22.,  23.]],\n<BLANKLINE>\n        [[ 18.,  19.],\n         [ 20.,  21.],\n\
      \         [ 22.,  23.]],\n<BLANKLINE>\n        [[ 18.,  19.],\n         [ 20.,\
      \  21.],\n         [ 22.,  23.]],\n<BLANKLINE>\n        [[ 18.,  19.],\n   \
      \      [ 20.,  21.],\n         [ 22.,  23.]]]], dtype=float32)"
    variables: []
  type: Method
  uid: cntk.ops.sequence.broadcast_as
- _type: function
  fullName: cntk.ops.sequence.delay
  module: cntk.ops.sequence
  name: delay
  source:
    id: delay
    path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/ops/sequence/__init__.py
    remote:
      branch: master
      path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/ops/sequence/__init__.py
      repo: null
    startLine: 13
  syntax:
    exceptions: []
    parameters:
    - description: the tensor (or its name) from which the past value is obtained
      id: name
      type: str, optional
    - description: tensor or scalar representing the initial value to be used when
        the input tensor is shifted in time.
      id: time_step
      type: int
    returntype: ''
    returnvalue: ''
    summary: This function combines `past_value` and `future_value` into a single
      function. This is useful when the time_step can be specified as positive or
      negative.
    variables: []
  type: Method
  uid: cntk.ops.sequence.delay
- _type: function
  fullName: cntk.ops.sequence.first
  module: cntk.ops.sequence
  name: first
  source:
    id: first
    path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/internal/swig_helper.py
    remote:
      branch: master
      path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/internal/swig_helper.py
      repo: null
    startLine: 112
  syntax:
    exceptions: []
    parameters:
    - description: the symbolic tensor denoting a sequence
      id: name
      type: str
    returntype: ''
    returnvalue: '`Function`'
    summary: "Returns the first element of its symbolic input sequence `seq`\n-[ Example\
      \ ]-\n>>> x = C.input_variable(shape=(3,2))\n>>> y = C.sequence.first(x)\n>>>\
      \ # create one sequence of 4 tensors each with shape (3,2)\n>>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))\n\
      >>> y.eval({x:x0})\narray([[[ 0.,  1.],\n         [ 2.,  3.],\n         [ 4.,\
      \  5.]]], dtype=float32)"
    variables: []
  type: Method
  uid: cntk.ops.sequence.first
- _type: function
  fullName: cntk.ops.sequence.gather
  module: cntk.ops.sequence
  name: gather
  source:
    id: gather
    path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/internal/swig_helper.py
    remote:
      branch: master
      path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/internal/swig_helper.py
      repo: null
    startLine: 211
  syntax:
    exceptions: []
    parameters:
    - description: the symbolic sequence from which elements will be selected
      id: name
      type: str
    returntype: ''
    returnvalue: '`Function`'
    summary: "Takes two sequences of the same length and returns a new sequence whose\
      \ elements are those elements of sequence `seq` whose corresponding element\
      \ in `condition` is True, preserving the ordering of `seq`.\nThis operation\
      \ is also known as stream compaction, or copy_if.\n-[ Example ]-\n>>> x = C.input_variable(shape=(3,2))\n\
      >>> z = C.greater(C.reduce_sum(x),60)\n>>> y = C.sequence.gather(x,z)\n>>> #\
      \ create one sequence of 4 tensors each with shape (3,2)\n>>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))\n\
      >>> y.eval({x:x0})\narray([[[[ 12.,  13.],\n         [ 14.,  15.],\n       \
      \  [ 16.,  17.]],\n<BLANKLINE>\n        [[ 18.,  19.],\n         [ 20.,  21.],\n\
      \         [ 22.,  23.]]]], dtype=float32)"
    variables: []
  type: Method
  uid: cntk.ops.sequence.gather
- _type: function
  fullName: cntk.ops.sequence.is_first
  module: cntk.ops.sequence
  name: is_first
  source:
    id: is_first
    path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/internal/swig_helper.py
    remote:
      branch: master
      path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/internal/swig_helper.py
      repo: null
    startLine: 36
  syntax:
    exceptions: []
    parameters:
    - description: the symbolic tensor denoting a sequence
      id: name
      type: str
    returntype: ''
    returnvalue: '`Function`'
    summary: 'Returns a symbolic sequence of booleans with the same length as `seq`.
      The first element of the sequence is 1 and all others are 0.

      -[ Example ]-

      >>> x = C.input_variable(shape=(3,2))

      >>> y = C.sequence.is_first(x)

      >>> # create one sequence of 4 tensors each with shape (3,2)

      >>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))

      >>> y.eval({x:x0})

      array([[ 1.,  0.,  0.,  0.]], dtype=float32)'
    variables: []
  type: Method
  uid: cntk.ops.sequence.is_first
- _type: function
  fullName: cntk.ops.sequence.is_last
  module: cntk.ops.sequence
  name: is_last
  source:
    id: is_last
    path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/internal/swig_helper.py
    remote:
      branch: master
      path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/internal/swig_helper.py
      repo: null
    startLine: 62
  syntax:
    exceptions: []
    parameters:
    - description: the symbolic tensor denoting a sequence
      id: name
      type: str
    returntype: ''
    returnvalue: '`Function`'
    summary: 'Returns a symbolic sequence of booleans with the same length as `seq`.
      The last element of the sequence is 1 and all others are 0.

      -[ Example ]-

      >>> x = C.input_variable(shape=(3,2))

      >>> y = C.sequence.is_last(x)

      >>> # create one sequence of 4 tensors each with shape (3,2)

      >>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))

      >>> y.eval({x:x0})

      array([[ 0.,  0.,  0.,  1.]], dtype=float32)'
    variables: []
  type: Method
  uid: cntk.ops.sequence.is_last
- _type: function
  fullName: cntk.ops.sequence.last
  module: cntk.ops.sequence
  name: last
  source:
    id: last
    path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/internal/swig_helper.py
    remote:
      branch: master
      path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/internal/swig_helper.py
      repo: null
    startLine: 138
  syntax:
    exceptions: []
    parameters:
    - description: the symbolic tensor denoting a sequence
      id: name
      type: str
    returntype: ''
    returnvalue: '`Function`'
    summary: "Returns the last element of its symbolic input sequence `seq`\n-[ Example\
      \ ]-\n>>> x = C.input_variable(shape=(3,2))\n>>> y = C.sequence.last(x)\n>>>\
      \ # create one sequence of 4 tensors each with shape (3,2)\n>>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))\n\
      >>> y.eval({x:x0})\narray([[[ 18.,  19.],\n         [ 20.,  21.],\n        \
      \ [ 22.,  23.]]], dtype=float32)"
    variables: []
  type: Method
  uid: cntk.ops.sequence.last
- _type: function
  fullName: cntk.ops.sequence.reduce_sum
  module: cntk.ops.sequence
  name: reduce_sum
  source:
    id: reduce_sum
    path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/internal/swig_helper.py
    remote:
      branch: master
      path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/internal/swig_helper.py
      repo: null
    startLine: 361
  syntax:
    exceptions: []
    parameters:
    - description: sequence input tensor
      id: name
      type: str, optional
    returntype: ''
    returnvalue: '`Function`'
    summary: "Computes the sum of the input sequence's elements across the sequence\
      \ axis.\n-[ Examples ]-\n>>> x = C.input_variable(shape=(3,2))\n>>> # create\
      \ one sequence of 4 tensors each with shape (3,2)\n>>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))\n\
      >>> y = C.sequence.reduce_sum(x)\n>>> y.eval({x:x0})\narray([[[ 36.,  40.],\n\
      \         [ 44.,  48.],\n         [ 52.,  56.]]], dtype=float32)"
    variables: []
  type: Method
  uid: cntk.ops.sequence.reduce_sum
- _type: function
  fullName: cntk.ops.sequence.scatter
  module: cntk.ops.sequence
  name: scatter
  source:
    id: scatter
    path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/internal/swig_helper.py
    remote:
      branch: master
      path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/internal/swig_helper.py
      repo: null
    startLine: 257
  syntax:
    exceptions: []
    parameters:
    - description: the symbolic sequence from which elements will be copied in the
        output
      id: name
      type: str
    returntype: ''
    returnvalue: '`Function`'
    summary: "Performs the inverse of gather. The sequence `seq` must have as many\
      \ elements as the number of True values in the sequence `condition`. It will\
      \ return a sequence whose length is the same as the `condition` sequence with\
      \ zeroes everywhere except for the locations where `condition` evaluates to\
      \ True in which case it will copy the elements from `seq` preserving their order.\n\
      -[ Example ]-\n>>> x = C.input_variable(shape=(3,2))\n>>> t = C.sequence.last(x)\n\
      >>> b = C.sequence.is_first(x)\n>>> y = C.sequence.scatter(t, b)\n>>> # create\
      \ one sequence of 4 tensors each with shape (3,2)\n>>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))\n\
      >>> y.eval({x:x0})\narray([[[[ 18.,  19.],\n         [ 20.,  21.],\n       \
      \  [ 22.,  23.]],\n<BLANKLINE>\n        [[  0.,   0.],\n         [  0.,   0.],\n\
      \         [  0.,   0.]],\n<BLANKLINE>\n        [[  0.,   0.],\n         [  0.,\
      \   0.],\n         [  0.,   0.]],\n<BLANKLINE>\n        [[  0.,   0.],\n   \
      \      [  0.,   0.],\n         [  0.,   0.]]]], dtype=float32)"
    variables: []
  type: Method
  uid: cntk.ops.sequence.scatter
- _type: function
  fullName: cntk.ops.sequence.slice
  module: cntk.ops.sequence
  name: slice
  source:
    id: slice
    path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/internal/swig_helper.py
    remote:
      branch: master
      path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/internal/swig_helper.py
      repo: null
    startLine: 88
  syntax:
    exceptions: []
    parameters: []
    returntype: ''
    returnvalue: '`Function`'
    summary: 'Slice the input sequence.

      -[ Examples ]-

      TBA

      See also: Indexing in NumPy: [http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html](http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html)'
    variables: []
  type: Method
  uid: cntk.ops.sequence.slice
- _type: function
  fullName: cntk.ops.sequence.where
  module: cntk.ops.sequence
  name: where
  source:
    id: where
    path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/internal/swig_helper.py
    remote:
      branch: master
      path: root/anaconda3/envs/cntk-py35/lib/python3.5/site-packages/cntk/internal/swig_helper.py
      repo: null
    startLine: 165
  syntax:
    exceptions: []
    parameters:
    - description: sequence of 0 or 1 values for filtering, or other positive values
        for repetition (also fractional)
      id: name
      type: str
    returntype: ''
    returnvalue: '`Function`'
    summary: "Given a symbolic sequence `condition` of boolean-like (1/0) values,\
      \ it will return a new sequence containing the indices for which the values\
      \ were true.\nIf `condition` has a value other than 0 or 1, it will denote a\
      \ repeat factor. If a repeat factor is fractional, it will round up but deduct\
      \ the overshoot from the next repeat factor.\n-[ Example ]-\n>>> x = C.input_variable(shape=(3,2))\n\
      >>> z = C.greater(C.reduce_sum(x), 60)\n>>> # create one sequence of 4 tensors\
      \ each with shape (3,2)\n>>> x0 = np.reshape(np.arange(24.0, dtype=np.float32),\
      \ (1,4,3,2))\n>>> z.eval({x:x0})\narray([[[ 0.],\n        [ 0.],\n        [\
      \ 1.],\n        [ 1.]]], dtype=float32)\n>>> y = C.sequence.where(z)\n>>> y.eval({x:x0})\n\
      array([[ 2.,  3.]], dtype=float32)\n>>> # repeat frame[1] twice, frame[3] three\
      \ times, and frame[4] twice\n>>> C.sequence.where(C.input_variable(1)).eval([[[1],\
      \ [2], [1], [3], [2]]])\narray([[ 0.,  1.,  1.,  2.,  3.,  3.,  3.,  4.,  4.]],\
      \ dtype=float32)\n>>> # note that the above are the indices that are passed\
      \ to\n>>> # repeat frames with a fractional factor\n>>> C.sequence.where(C.input_variable(1)).eval([[[1.2]]*10])\n\
      array([[ 0.,  0.,  1.,  2.,  3.,  4.,  5.,  5.,  6.,  7.,  8.,  9.]], dtype=float32)\n\
      >>> # as a result, a 1.2 times stretch is realized by duplicating frame[0] and\
      \ frame[5]"
    variables: []
  type: Method
  uid: cntk.ops.sequence.where
