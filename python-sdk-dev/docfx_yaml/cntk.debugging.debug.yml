api_name: []
items:
- _type: module
  children:
  - cntk.debugging.debug.debug_model
  - cntk.debugging.debug.save_as_legacy_model
  - cntk.debugging.debug.set_computation_network_trace_level
  - cntk.debugging.debug.set_computation_network_track_gap_nans
  fullName: cntk.debugging.debug
  langs:
  - python
  module: cntk.debugging.debug
  name: debug
  source:
    id: debug
    path: cntk/debugging/debug.py
    remote:
      branch: master
      path: cntk/debugging/debug.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 0
  type: Namespace
  uid: cntk.debugging.debug
- _type: function
  fullName: cntk.debugging.debug.debug_model
  langs:
  - python
  module: cntk.debugging.debug
  name: debug_model
  source:
    id: debug_model
    path: cntk/debugging/debug.py
    remote:
      branch: master
      path: cntk/debugging/debug.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 391
  summary: Returns a cloned model that has debug nodes inserted everywhere. When the
    graph is evaluated or trained, those nodes will allow to inspect the graph.
  syntax:
    exceptions: []
    parameters:
    - description: root node until which the nodes are to be debugged
      id: out_stream
      type: object behaving like sys.stdout, default stdout
    - description: '*readline()* will be called on it to obtain user input'
      id: model
      type: root node
    - description: '*write()* and *flush()* will be called on it to output debug info
        to the user'
      id: exit_func
      type: callable, default sys.exit
    - description: callable that takes an exit code and is called, when the user exits
        the debugging process
      id: in_stream
      type: object behaving like sys.stdin, default stdin
    return:
      description: a clone of the model that has debugging enabled
    variables: []
  type: Method
  uid: cntk.debugging.debug.debug_model
- _type: function
  fullName: cntk.debugging.debug.save_as_legacy_model
  langs:
  - python
  module: cntk.debugging.debug
  name: save_as_legacy_model
  source:
    id: save_as_legacy_model
    path: cntk/debugging/debug.py
    remote:
      branch: master
      path: cntk/debugging/debug.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 86
  summary: Save the network of `root_op` in `filename`. For debugging purposes only,
    very likely to be deprecated in the future.
  syntax:
    exceptions: []
    parameters:
    - description: op of the graph to save
      id: filename
      type: str
    - description: filename to store the model in.
      id: root_op
      type: Function
    return: {}
    variables: []
  type: Method
  uid: cntk.debugging.debug.save_as_legacy_model
- _type: function
  fullName: cntk.debugging.debug.set_computation_network_trace_level
  langs:
  - python
  module: cntk.debugging.debug
  name: set_computation_network_trace_level
  source:
    id: set_computation_network_trace_level
    path: cntk/debugging/debug.py
    remote:
      branch: master
      path: cntk/debugging/debug.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 120
  summary: "Set trace level to the computation network. Currently supported values:\n\
    \   0        : turn off trace 1        : output nodes' dimensions and some other\
    \ static info 1000     : output each node's abs sum of elements in its value matrix\
    \ for every forward/backward 1000000  : output each node's full matrix for every\
    \ forward/backward"
  syntax:
    exceptions: []
    parameters:
    - description: trace level
      id: level
      type: int
    return: {}
    variables: []
  type: Method
  uid: cntk.debugging.debug.set_computation_network_trace_level
- _type: function
  fullName: cntk.debugging.debug.set_computation_network_track_gap_nans
  langs:
  - python
  module: cntk.debugging.debug
  name: set_computation_network_track_gap_nans
  source:
    id: set_computation_network_track_gap_nans
    path: cntk/debugging/debug.py
    remote:
      branch: master
      path: cntk/debugging/debug.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 109
  summary: Fill in NaNs in gaps of sequences to track unmasked uninitialized data.
    For debugging purposes only.
  syntax:
    exceptions: []
    parameters:
    - description: whether to enable gap nans tracking (with performance impact)
      id: enable
      type: Boolean
    return: {}
    variables: []
  type: Method
  uid: cntk.debugging.debug.set_computation_network_track_gap_nans
references:
- fullName: cntk.debugging.debug.debug_model
  isExternal: false
  name: debug_model
  parent: cntk.debugging.debug
  uid: cntk.debugging.debug.debug_model
- fullName: cntk.debugging.debug.save_as_legacy_model
  isExternal: false
  name: save_as_legacy_model
  parent: cntk.debugging.debug
  uid: cntk.debugging.debug.save_as_legacy_model
- fullName: cntk.debugging.debug.set_computation_network_trace_level
  isExternal: false
  name: set_computation_network_trace_level
  parent: cntk.debugging.debug
  uid: cntk.debugging.debug.set_computation_network_trace_level
- fullName: cntk.debugging.debug.set_computation_network_track_gap_nans
  isExternal: false
  name: set_computation_network_track_gap_nans
  parent: cntk.debugging.debug
  uid: cntk.debugging.debug.set_computation_network_track_gap_nans
