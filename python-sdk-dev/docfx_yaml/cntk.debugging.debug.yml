#YamlMime:PythonReference
api_name: []
items:
- _type: module
  children:
  - cntk.debugging.debug.debug_model
  - cntk.debugging.debug.save_as_legacy_model
  - cntk.debugging.debug.set_computation_network_trace_level
  - cntk.debugging.debug.set_computation_network_track_gap_nans
  fullName: cntk.debugging.debug
  langs:
  - python
  module: cntk.debugging.debug
  name: debug
  source:
    id: debug
    path: cntk/debugging/debug.py
    remote:
      branch: master
      path: cntk/debugging/debug.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 0
  summary: 'In order to debug a graph one simply needs to wrap the root node as follows::


    # ... setting up the model in z     from cntk.debug import debug_model     z =
    debug_model(z)


    Then, when ``z`` is evaluated or trained (i.e. when either :meth:`~cntk.ops.functions.Function.forward`
    or :meth:`~cntk.ops.functions.Function.backward` is called, you will see the following
    command-line interface::


    =================================== forward  ===================================     Parameter
    node with uid=''Parameter28'' shape=[](2,)     [CNTK forward] >>> help         Commands:         n
    - execute the next node         n <number> - execute the next <number> nodes


    u f - exeucte until forward pass (like ''n'' when already in forward pass)         u
    b - exeucte until backward pass (like ''n'' when already in backward pass)         u
    name - execute until a node with that name is hit         u <lambda> - execute
    until the lambda expression is True. Examples:                      Until a Times
    node is hit:                          lambda arg, node: node.op_name == ''Times''                      Until
    a node is hit that has 3 dimensions:                          lambda arg, node:
    len(node.shape) == 3                      Until the variance of the input exceeds
    1 (np = numpy):                          lambda arg, node: np.var(arg) > 1


    c - exeucte until end         p - print input (forward) or root gradients (backward)         d
    - drop into a pdb shell         q - quit


    [CNTK backward] >>> n


    Times node with uid=''Times29'' shape=[*,*](2,)     [CNTK forward] >>> n     ===================================
    backward ===================================     Times node with uid=''Times29''
    shape=[*,*](2,)     [CNTK backward] >>> p     State: None     Root gradients:     [[[-0.79412955  0.79412955]]      [[-0.79412955  0.79412955]]      [[
    0.20587046 -0.20587045]]      [[ 0.20587046 -0.20587045]]      [[ 0.20587046 -0.20587045]]      [[
    0.20587046 -0.20587045]]      [[-0.79412955  0.79412955]]      [[ 0.20587046 -0.20587045]]      [[
    0.20587039 -0.20587039]]      [[-0.79412961  0.79412961]]]


    At every stop the following information is given:  * Forward or backward pass  *
    Node type (e.g. ''Times'')  * Name if given, otherwise it is omitted  * uid, which
    is a unique reference within the graph  * shape having the format [dynamic axis](static
    axes). E.g. ``[*,*](2,)``    means that the node''s output has two dynamic axes
    (batch and sequence) and    one static axis (2 dimensions)'
  type: Namespace
  uid: cntk.debugging.debug
- _type: function
  fullName: cntk.debugging.debug.debug_model
  langs:
  - python
  module: cntk.debugging.debug
  name: debug_model
  source:
    id: debug_model
    path: cntk/debugging/debug.py
    remote:
      branch: master
      path: cntk/debugging/debug.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 391
  summary: Returns a cloned model that has debug nodes inserted everywhere. When the
    graph is evaluated or trained, those nodes will allow to inspect the graph.
  syntax:
    content: debug_model(model, in_stream=<_io.TextIOWrapper name='<stdin>' mode='r'
      encoding='ANSI_X3.4-1968'>, out_stream=<_io.TextIOWrapper name='<stdout>' mode='w'
      encoding='ANSI_X3.4-1968'>, exit_func=<built-in function exit>)
    parameters:
    - description: root node until which the nodes are to be debugged
      id: model
      type:
      - root node
    - defaultValue: <built-in function exit>
      description: '*readline()* will be called on it to obtain user input'
      id: in_stream
      type:
      - object behaving like sys.stdin, default stdin
    - defaultValue: <_io.TextIOWrapper name='<stdout>' mode='w' encoding='ANSI_X3.4-1968'>
      description: '*write()* and *flush()* will be called on it to output debug info
        to the user'
      id: out_stream
      type:
      - object behaving like sys.stdout, default stdout
    - defaultValue: <_io.TextIOWrapper name='<stdin>' mode='r' encoding='ANSI_X3.4-1968'>
      description: callable that takes an exit code and is called, when the user exits
        the debugging process
      id: exit_func
      type:
      - callable, default sys.exit
    return:
      description: a clone of the model that has debugging enabled
  type: Method
  uid: cntk.debugging.debug.debug_model
- _type: function
  fullName: cntk.debugging.debug.save_as_legacy_model
  langs:
  - python
  module: cntk.debugging.debug
  name: save_as_legacy_model
  source:
    id: save_as_legacy_model
    path: cntk/debugging/debug.py
    remote:
      branch: master
      path: cntk/debugging/debug.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 86
  summary: Save the network of `root_op` in `filename`. For debugging purposes only,
    very likely to be deprecated in the future.
  syntax:
    content: save_as_legacy_model(root_op, filename)
    parameters:
    - description: op of the graph to save
      id: root_op
      type:
      - Function
    - description: filename to store the model in.
      id: filename
      type:
      - str
  type: Method
  uid: cntk.debugging.debug.save_as_legacy_model
- _type: function
  fullName: cntk.debugging.debug.set_computation_network_trace_level
  langs:
  - python
  module: cntk.debugging.debug
  name: set_computation_network_trace_level
  source:
    id: set_computation_network_trace_level
    path: cntk/debugging/debug.py
    remote:
      branch: master
      path: cntk/debugging/debug.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 120
  summary: "Set trace level to the computation network. Currently supported values:\n\
    \   0        : turn off trace 1        : output nodes' dimensions and some other\
    \ static info 1000     : output each node's abs sum of elements in its value matrix\
    \ for every forward/backward 1000000  : output each node's full matrix for every\
    \ forward/backward"
  syntax:
    content: set_computation_network_trace_level(level)
    parameters:
    - description: trace level
      id: level
      type:
      - int
  type: Method
  uid: cntk.debugging.debug.set_computation_network_trace_level
- _type: function
  fullName: cntk.debugging.debug.set_computation_network_track_gap_nans
  langs:
  - python
  module: cntk.debugging.debug
  name: set_computation_network_track_gap_nans
  source:
    id: set_computation_network_track_gap_nans
    path: cntk/debugging/debug.py
    remote:
      branch: master
      path: cntk/debugging/debug.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 109
  summary: Fill in NaNs in gaps of sequences to track unmasked uninitialized data.
    For debugging purposes only.
  syntax:
    content: set_computation_network_track_gap_nans(enable)
    parameters:
    - description: whether to enable gap nans tracking (with performance impact)
      id: enable
      type:
      - Boolean
  type: Method
  uid: cntk.debugging.debug.set_computation_network_track_gap_nans
references:
- fullName: cntk.debugging.debug.debug_model
  isExternal: false
  name: debug_model
  parent: cntk.debugging.debug
  uid: cntk.debugging.debug.debug_model
- fullName: cntk.debugging.debug.save_as_legacy_model
  isExternal: false
  name: save_as_legacy_model
  parent: cntk.debugging.debug
  uid: cntk.debugging.debug.save_as_legacy_model
- fullName: cntk.debugging.debug.set_computation_network_trace_level
  isExternal: false
  name: set_computation_network_trace_level
  parent: cntk.debugging.debug
  uid: cntk.debugging.debug.set_computation_network_trace_level
- fullName: cntk.debugging.debug.set_computation_network_track_gap_nans
  isExternal: false
  name: set_computation_network_track_gap_nans
  parent: cntk.debugging.debug
  uid: cntk.debugging.debug.set_computation_network_track_gap_nans
