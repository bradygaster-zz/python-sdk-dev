#YamlMime:PythonReference
api_name: []
items:
- _type: module
  children:
  - cntk.layers.higher_order_layers.For
  - cntk.layers.higher_order_layers.LayerStack
  - cntk.layers.higher_order_layers.ResNetBlock
  - cntk.layers.higher_order_layers.Sequential
  - cntk.layers.higher_order_layers.SequentialClique
  fullName: cntk.layers.higher_order_layers
  langs:
  - python
  module: cntk.layers.higher_order_layers
  name: higher_order_layers
  source:
    id: higher_order_layers
    path: cntk/layers/higher_order_layers.py
    remote:
      branch: master
      path: cntk/layers/higher_order_layers.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 0
  summary: higher_order_layers -- higher-order functions, like Sequential() and ResNetBlock().
    Note that sequential higher-order functions like Recurrence() are in sequence.py.
  type: Namespace
  uid: cntk.layers.higher_order_layers
- _type: function
  fullName: cntk.layers.higher_order_layers.For
  langs:
  - python
  module: cntk.layers.higher_order_layers
  name: For
  source:
    id: For
    path: cntk/layers/higher_order_layers.py
    remote:
      branch: master
      path: cntk/layers/higher_order_layers.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 35
  summary: "Layer factory function to create a composite that applies a sequence of\
    \ layers constructed with a constructor lambda(layer). For example:\n<!-- literal_block\
    \ {\"xml:space\": \"preserve\", \"dupnames\": [], \"classes\": [], \"ids\": [],\
    \ \"backrefs\": [], \"names\": []} -->\n\n````\n\n   For(range(3), lambda i: Dense(2000))\n\
    \   For(range(3), lambda: Dense(2000))\n   ````"
  syntax:
    content: For(rng, constructor, name="")
    parameters:
    - defaultValue: ''
      id: rng
    - id: constructor
    - id: name
  type: Method
  uid: cntk.layers.higher_order_layers.For
- _type: function
  fullName: cntk.layers.higher_order_layers.LayerStack
  langs:
  - python
  module: cntk.layers.higher_order_layers
  name: LayerStack
  source:
    id: LayerStack
    path: cntk/layers/higher_order_layers.py
    remote:
      branch: master
      path: cntk/layers/higher_order_layers.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 60
  syntax:
    content: LayerStack(N, constructor)
    parameters:
    - id: N
    - id: constructor
  type: Method
  uid: cntk.layers.higher_order_layers.LayerStack
- _type: function
  fullName: cntk.layers.higher_order_layers.ResNetBlock
  langs:
  - python
  module: cntk.layers.higher_order_layers
  name: ResNetBlock
  source:
    id: ResNetBlock
    path: cntk/layers/higher_order_layers.py
    remote:
      branch: master
      path: cntk/layers/higher_order_layers.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 87
  summary: Layer factory function to create a composite that adds a skip connection
    to a function. This is equivalent to `SequentialClique([f, identity])`.
  syntax:
    content: ResNetBlock(f, name="")
    parameters:
    - id: f
    - defaultValue: ''
      id: name
  type: Method
  uid: cntk.layers.higher_order_layers.ResNetBlock
- _type: function
  fullName: cntk.layers.higher_order_layers.Sequential
  langs:
  - python
  module: cntk.layers.higher_order_layers
  name: Sequential
  source:
    id: Sequential
    path: cntk/layers/higher_order_layers.py
    remote:
      branch: master
      path: cntk/layers/higher_order_layers.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 20
  summary: Layer factory function to create a composite that applies a sequence of
    layers (or any functions) onto an input. Sequential ([F, G, H]) === F >> G >>
    H
  syntax:
    content: Sequential(layers, name="")
    parameters:
    - id: layers
    - defaultValue: ''
      id: name
  type: Method
  uid: cntk.layers.higher_order_layers.Sequential
- _type: function
  fullName: cntk.layers.higher_order_layers.SequentialClique
  langs:
  - python
  module: cntk.layers.higher_order_layers
  name: SequentialClique
  source:
    id: SequentialClique
    path: cntk/layers/higher_order_layers.py
    remote:
      branch: master
      path: cntk/layers/higher_order_layers.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 67
  summary: Layer factory function to create a composite that applies a sequence of
    or any functions onto an input, with skip connections between all function. I.e.
    each function receives a sum of the input and all prior functions' outputs.
  syntax:
    content: SequentialClique(functions, name="")
    parameters:
    - id: functions
    - defaultValue: ''
      id: name
  type: Method
  uid: cntk.layers.higher_order_layers.SequentialClique
references:
- fullName: cntk.layers.higher_order_layers.For
  isExternal: false
  name: For
  parent: cntk.layers.higher_order_layers
  uid: cntk.layers.higher_order_layers.For
- fullName: cntk.layers.higher_order_layers.LayerStack
  isExternal: false
  name: LayerStack
  parent: cntk.layers.higher_order_layers
  uid: cntk.layers.higher_order_layers.LayerStack
- fullName: cntk.layers.higher_order_layers.ResNetBlock
  isExternal: false
  name: ResNetBlock
  parent: cntk.layers.higher_order_layers
  uid: cntk.layers.higher_order_layers.ResNetBlock
- fullName: cntk.layers.higher_order_layers.Sequential
  isExternal: false
  name: Sequential
  parent: cntk.layers.higher_order_layers
  uid: cntk.layers.higher_order_layers.Sequential
- fullName: cntk.layers.higher_order_layers.SequentialClique
  isExternal: false
  name: SequentialClique
  parent: cntk.layers.higher_order_layers
  uid: cntk.layers.higher_order_layers.SequentialClique
