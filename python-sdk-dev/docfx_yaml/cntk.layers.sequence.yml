#YamlMime:PythonReference
api_name: []
items:
- _type: module
  children:
  - cntk.layers.sequence.Delay
  - cntk.layers.sequence.Fold
  - cntk.layers.sequence.PastValueWindow
  - cntk.layers.sequence.Recurrence
  - cntk.layers.sequence.RecurrenceFrom
  - cntk.layers.sequence.UnfoldFrom
  fullName: cntk.layers.sequence
  langs:
  - python
  module: cntk.layers.sequence
  name: sequence
  source:
    id: sequence
    path: cntk/layers/sequence.py
    remote:
      branch: master
      path: cntk/layers/sequence.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 0
  type: Namespace
  uid: cntk.layers.sequence
- _type: function
  fullName: cntk.layers.sequence.Delay
  langs:
  - python
  module: cntk.layers.sequence
  name: Delay
  source:
    id: Delay
    path: cntk/layers/sequence.py
    remote:
      branch: master
      path: cntk/layers/sequence.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 15
  summary: Layer factory function to create a layer that delays input the input by
    a given number of time steps. Negative means future. This is provided as a layer
    instead of a function so that it can easily be used in a Sequential() expression.
  syntax:
    content: Delay(T=1, initial_state=<cntk.default_options.default_override_or object
      at 0x2b1e628d96a0>, name="")
    parameters:
    - defaultValue: <cntk.default_options.default_override_or object at 0x2b1e628d96a0>
      id: T
    - defaultValue: '1'
      id: initial_state
    - id: name
  type: Method
  uid: cntk.layers.sequence.Delay
- _type: function
  fullName: cntk.layers.sequence.Fold
  langs:
  - python
  module: cntk.layers.sequence
  name: Fold
  source:
    id: Fold
    path: cntk/layers/sequence.py
    remote:
      branch: master
      path: cntk/layers/sequence.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 189
  summary: 'Layer factory function to create a function that implements the fold()
    catamorphism. It is like `Recurrence()` except that it returns only the final
    state. This is often used for embeddings of sequences, e.g. in a sequence-to-sequence
    model.

    Commonly, the `folder_function` is a recurrent block such as an LSTM. One can,
    however, pass any binary function. E.g. passing `plus` will sum up all items of
    a sequence; while `element_max` would perform a max-pooling over all items of
    the sequence.

    `go_backwards=False` selects a fold-left, while `True` a fold-right, but note
    that the `folder_function` signature is always the one of fold-left.'
  syntax:
    content: Fold(folder_function, go_backwards=<cntk.default_options.default_override_or
      object at 0x2b1e628d97b8>, initial_state=<cntk.default_options.default_override_or
      object at 0x2b1e628d97f0>, return_full_state=False, name="")
    parameters:
    - id: folder_function
    - defaultValue: ''
      id: go_backwards
    - defaultValue: 'False'
      id: initial_state
    - defaultValue: <cntk.default_options.default_override_or object at 0x2b1e628d97f0>
      id: return_full_state
    - defaultValue: <cntk.default_options.default_override_or object at 0x2b1e628d97b8>
      id: name
  type: Method
  uid: cntk.layers.sequence.Fold
- _type: function
  fullName: cntk.layers.sequence.PastValueWindow
  langs:
  - python
  module: cntk.layers.sequence
  name: PastValueWindow
  source:
    id: PastValueWindow
    path: cntk/layers/sequence.py
    remote:
      branch: master
      path: cntk/layers/sequence.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 40
  summary: 'Layer factory function to create a function that returns a static, maskable
    view for N past steps over a sequence along the given ''axis''. It returns two
    matrices: a value matrix, shape=(N,dim), and a valid window, shape=(1,dim)'
  syntax:
    content: PastValueWindow(window_size, axis, go_backwards=<cntk.default_options.default_override_or
      object at 0x2b1e628d96d8>, name="")
    parameters:
    - defaultValue: <cntk.default_options.default_override_or object at 0x2b1e628d96d8>
      id: window_size
    - id: axis
    - id: go_backwards
    - defaultValue: ''
      id: name
  type: Method
  uid: cntk.layers.sequence.PastValueWindow
- _type: function
  fullName: cntk.layers.sequence.Recurrence
  langs:
  - python
  module: cntk.layers.sequence
  name: Recurrence
  source:
    id: Recurrence
    path: cntk/layers/sequence.py
    remote:
      branch: master
      path: cntk/layers/sequence.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 151
  summary: 'Layer factory function to create a function that runs a cell function
    recurrently over a time sequence. This form is meant for use in regular recurrent-model
    scenarios. `initial_state` must be a constant (or at least have known shape).
    To pass initial_state as a data input, use RecurrenceFrom() instead. TODO: Can
    bidirectionality be an option of this? bidirectional=True? What was the reason
    it cannot?'
  syntax:
    content: Recurrence(step_function, go_backwards=<cntk.default_options.default_override_or
      object at 0x2b1e628d9748>, initial_state=<cntk.default_options.default_override_or
      object at 0x2b1e628d9780>, return_full_state=False, name="")
    parameters:
    - id: step_function
    - defaultValue: ''
      id: go_backwards
    - defaultValue: 'False'
      id: initial_state
    - defaultValue: <cntk.default_options.default_override_or object at 0x2b1e628d9780>
      id: return_full_state
    - defaultValue: <cntk.default_options.default_override_or object at 0x2b1e628d9748>
      id: name
  type: Method
  uid: cntk.layers.sequence.Recurrence
- _type: function
  fullName: cntk.layers.sequence.RecurrenceFrom
  langs:
  - python
  module: cntk.layers.sequence
  name: RecurrenceFrom
  source:
    id: RecurrenceFrom
    path: cntk/layers/sequence.py
    remote:
      branch: master
      path: cntk/layers/sequence.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 86
  summary: Layer factory function to create a function that runs a cell function recurrently
    over a time sequence, with initial state. This form is meant for use in sequence-to-sequence
    scenarios. The difference to Recurrence() is that this returns a function that
    accepts the initial state as data argument(s). Initial state consists of N arguments,
    matching 'over'.
  syntax:
    content: RecurrenceFrom(step_function, go_backwards=<cntk.default_options.default_override_or
      object at 0x2b1e628d9710>, return_full_state=False, name="")
    parameters:
    - id: step_function
    - defaultValue: ''
      id: go_backwards
    - defaultValue: 'False'
      id: return_full_state
    - defaultValue: <cntk.default_options.default_override_or object at 0x2b1e628d9710>
      id: name
  type: Method
  uid: cntk.layers.sequence.RecurrenceFrom
- _type: function
  fullName: cntk.layers.sequence.UnfoldFrom
  langs:
  - python
  module: cntk.layers.sequence
  name: UnfoldFrom
  source:
    id: UnfoldFrom
    path: cntk/layers/sequence.py
    remote:
      branch: master
      path: cntk/layers/sequence.py
      repo: https://github.com/Microsoft/CNTK
    startLine: 217
  summary: "Layer factory function to create a function that implements the unfold()\
    \ anamorphism. It creates a function that, starting with a seed input, applies\
    \ 'generator_function' repeatedly and emits the sequence of results. Depending\
    \ on the recurrent block, it may have this form:\n<!-- literal_block {\"xml:space\"\
    : \"preserve\", \"dupnames\": [], \"classes\": [], \"ids\": [], \"backrefs\":\
    \ [], \"names\": []} -->\n\n````\n\n   result = f(... f(f([g(input), initial_state]))\
    \ ... )\n   ````\nor this form:\n<!-- literal_block {\"xml:space\": \"preserve\"\
    , \"dupnames\": [], \"classes\": [], \"ids\": [], \"backrefs\": [], \"names\"\
    : []} -->\n\n````\n\n   result = f(g(input), ... f(g(input), f(g(input), initial_state))\
    \ ... )\n   ````\nwhere *f* is *generator_function*. An example use of this is\
    \ sequence-to-sequence decoding, where *g(input)* is the sequence encoder, *initial_state*\
    \ is the sentence-start symbol, and *f* is the decoder. The first of the two forms\
    \ above is a plain sequence-to-sequence model where encoder output is the start\
    \ state for the output recursion. The second form is an attention-based decoder,\
    \ where the encoded input affects every application of *f* differently."
  syntax:
    content: 'UnfoldFrom(generator_function, map_state_function=Composite(Combine):
      Placeholder(''keep'', [???], [???]) -> Placeholder(''keep'', [???], [???]),
      until_predicate=None, length_increase=1, initial_state=None, name="")'
    parameters:
    - id: generator_function
    - defaultValue: ''
      id: map_state_function
    - defaultValue: None
      id: until_predicate
    - defaultValue: '1'
      id: length_increase
    - defaultValue: None
      id: initial_state
    - defaultValue: 'Composite(Combine): Placeholder(''keep'', [???], [???]) -> Placeholder(''keep'',
        [???], [???])'
      id: name
  type: Method
  uid: cntk.layers.sequence.UnfoldFrom
references:
- fullName: cntk.layers.sequence.Delay
  isExternal: false
  name: Delay
  parent: cntk.layers.sequence
  uid: cntk.layers.sequence.Delay
- fullName: cntk.layers.sequence.Fold
  isExternal: false
  name: Fold
  parent: cntk.layers.sequence
  uid: cntk.layers.sequence.Fold
- fullName: cntk.layers.sequence.PastValueWindow
  isExternal: false
  name: PastValueWindow
  parent: cntk.layers.sequence
  uid: cntk.layers.sequence.PastValueWindow
- fullName: cntk.layers.sequence.Recurrence
  isExternal: false
  name: Recurrence
  parent: cntk.layers.sequence
  uid: cntk.layers.sequence.Recurrence
- fullName: cntk.layers.sequence.RecurrenceFrom
  isExternal: false
  name: RecurrenceFrom
  parent: cntk.layers.sequence
  uid: cntk.layers.sequence.RecurrenceFrom
- fullName: cntk.layers.sequence.UnfoldFrom
  isExternal: false
  name: UnfoldFrom
  parent: cntk.layers.sequence
  uid: cntk.layers.sequence.UnfoldFrom
